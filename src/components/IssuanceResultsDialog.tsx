import React from 'react';
import { Check, X, ChevronLeft, ChevronRight, CheckCircle, AlertTriangle, Package } from 'lucide-react';
import { IssuanceResult } from '../services/issuanceService';
import { useIssuanceStore } from '../store/issuanceStore';
import { STANDARD_TOOLKIT } from '../constants';

interface IssuanceResultsDialogProps {
  result: IssuanceResult;
  onClose: () => void;
  onConfirm: () => void;
  currentStep?: number;
  totalSteps?: number;
  photoFileName?: string;
  uploadedImages?: Array<{url: string, fileName: string}>;
  imageMLResults?: Array<{fileName: string, result: IssuanceResult}>;
}

export const IssuanceResultsDialog: React.FC<IssuanceResultsDialogProps> = ({
  result,
  onClose,
  onConfirm,
  currentStep = 3,
  totalSteps = 3,
  photoFileName = 'DSCN4946.JPG',
  uploadedImages = [],
  imageMLResults = []
}) => {
  const { setShowResultsDialog } = useIssuanceStore();
  const [currentImageIndex, setCurrentImageIndex] = React.useState(0);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
  const hasMultipleImages = imageMLResults.length > 1;
  const currentImageData = imageMLResults[currentImageIndex];

  const handleClose = () => {
    setShowResultsDialog(false);
    onClose();
  };

  // –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const handlePreviousImage = () => {
    if (currentImageIndex > 0) {
      setCurrentImageIndex(currentImageIndex - 1);
    }
  };

  const handleNextImage = () => {
    if (currentImageIndex < imageMLResults.length - 1) {
      setCurrentImageIndex(currentImageIndex + 1);
    }
  };

  // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const currentImageToolCount = currentImageData?.result.found_tools.length || 0;
  const standardToolkitSize = 11; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –Ω–∞–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  
  // –î–ª—è —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const issuedToolsCount = currentImageToolCount;
  const detectedToolsCount = currentImageToolCount;
  
  // –ù–∞—Ö–æ–¥–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const currentImageFoundToolIds = new Set(currentImageData?.result.found_tools.map(tool => tool.id) || []);
  const missingTools = STANDARD_TOOLKIT.filter(tool => !currentImageFoundToolIds.has(tool.id));
  const missingCount = missingTools.length;
  
  // –õ–∏—à–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–µ —á–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –Ω–∞–±–æ—Ä–µ)
  const excessCount = Math.max(0, currentImageToolCount - standardToolkitSize);
  
  console.log('üîç DEBUG: –¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', currentImageToolCount);
  console.log('üîç DEBUG: –ù–∞–π–¥–µ–Ω–Ω—ã–µ ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', Array.from(currentImageFoundToolIds));
  console.log('üîç DEBUG: –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:', missingTools);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const isFullKit = currentImageToolCount === standardToolkitSize;
  const needsCheck = currentImageToolCount !== standardToolkitSize;

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞
  const StatusIcon = () => {
    if (isFullKit) {
      return (
        <div className="flex items-center justify-center mb-6">
          <div className="bg-green-100 p-4 rounded-full">
            <CheckCircle className="w-12 h-12 text-green-600" />
          </div>
        </div>
      );
    } else if (needsCheck) {
      return (
        <div className="flex items-center justify-center mb-6">
          <div className="bg-orange-100 p-4 rounded-full">
            <AlertTriangle className="w-12 h-12 text-orange-600" />
          </div>
        </div>
      );
    } else {
      return (
        <div className="flex items-center justify-center mb-6">
          <div className="bg-blue-100 p-4 rounded-full">
            <Package className="w-12 h-12 text-blue-600" />
          </div>
        </div>
      );
    }
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  const StatusMessage = () => {
    if (isFullKit) {
      return (
        <div className="text-center mb-6">
          <h3 className="text-xl font-bold text-green-600 mb-2">
            ‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–¥–∞–Ω—ã!
          </h3>
          <p className="text-gray-600 text-sm">
            –ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –∏–∑ {standardToolkitSize} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
          </p>
        </div>
      );
    } else if (needsCheck) {
      return (
        <div className="text-center mb-6">
          <h3 className="text-xl font-bold text-orange-600 mb-2">
            –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞
          </h3>
          <p className="text-gray-600 text-sm">
            {currentImageToolCount === 0 
              ? `–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –∏–∑ ${standardToolkitSize} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.`
              : `–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–º–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞–º–∏.`
            }
          </p>
        </div>
      );
    } else {
      return (
        <div className="text-center mb-6">
          <h3 className="text-xl font-bold text-blue-600 mb-2">
            üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          </h3>
          <p className="text-gray-600 text-sm">
            –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω
          </p>
        </div>
      );
    }
  };

  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  if (!currentImageData) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 max-w-2xl w-full mx-4">
          <div className="text-center">
            <h2 className="text-xl font-bold text-gray-800 mb-4">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</h2>
            <button
              onClick={handleClose}
              className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π */}
        <div className="flex justify-between items-center mb-6">
          <div className="flex items-center space-x-4">
            <h2 className="text-2xl font-bold text-gray-800">
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–¥–∞—á–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            </h2>
            {hasMultipleImages && (
              <div className="flex items-center space-x-2 text-sm text-gray-600">
                <span>–§–æ—Ç–æ {currentImageIndex + 1} –∏–∑ {imageMLResults.length}</span>
              </div>
            )}
          </div>
          <button
            onClick={handleClose}
            className="text-gray-500 hover:text-gray-700 text-2xl"
          >
            √ó
          </button>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ */}
        {hasMultipleImages && (
          <div className="flex justify-between items-center mb-6">
            <button
              onClick={handlePreviousImage}
              disabled={currentImageIndex === 0}
              className="flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <ChevronLeft className="w-4 h-4" />
              <span>–ü—Ä–µ–¥—ã–¥—É—â–µ–µ</span>
            </button>
            
            <div className="flex space-x-2">
              {imageMLResults.map((_, index) => (
                <button
                  key={index}
                  onClick={() => setCurrentImageIndex(index)}
                  className={`w-3 h-3 rounded-full ${
                    index === currentImageIndex ? 'bg-blue-600' : 'bg-gray-300'
                  }`}
                />
              ))}
            </div>
            
            <button
              onClick={handleNextImage}
              disabled={currentImageIndex === imageMLResults.length - 1}
              className="flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span>–°–ª–µ–¥—É—é—â–µ–µ</span>
              <ChevronRight className="w-4 h-4" />
            </button>
          </div>
        )}

        <div className="space-y-6">
          {/* –°—Ç–∞—Ç—É—Å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ) */}
          <StatusIcon />
          <StatusMessage />

          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ */}
          <div className="text-center">
            <h3 className="text-xl font-bold text-blue-600 mb-2">
              {currentImageData.fileName}
            </h3>
            <p className="text-gray-600 text-sm">
              –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {currentImageData.result.found_tools.length}
            </p>
          </div>

          {/* –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ */}
          <div>
            <h4 className="text-lg font-semibold text-gray-800 mb-3">
              –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ ML
            </h4>
            {currentImageData.result.processed_image_url ? (
              <div className="border rounded-lg p-4 bg-gray-50">
                <img
                  src={`http://localhost:8000${currentImageData.result.processed_image_url}`}
                  alt="–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"
                  className="max-w-full h-auto rounded"
                  onError={(e) => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', currentImageData.result.processed_image_url);
                    e.currentTarget.style.display = 'none';
                    e.currentTarget.nextElementSibling?.classList.remove('hidden');
                  }}
                />
                <div className="hidden text-center py-4">
                  <p className="text-gray-500">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</p>
                </div>
              </div>
            ) : (
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                <p className="text-gray-500">–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
              </div>
            )}
          </div>

          {/* –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ */}
          <div>
            <div className="flex items-center space-x-2 mb-3">
              <Check className="w-5 h-5 text-green-600" />
              <h4 className="text-lg font-semibold text-green-600">
                –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ ({currentImageData.result.found_tools.length})
              </h4>
            </div>
            {currentImageData.result.found_tools.length > 0 ? (
              <div className="space-y-2 max-h-40 overflow-y-auto border rounded-lg p-3 bg-green-50">
                {currentImageData.result.found_tools.map((tool, index) => (
                  <div key={index} className="flex items-center justify-between p-2 bg-white rounded">
                    <div className="flex items-center space-x-3">
                      <div className="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center">
                        <span className="text-green-600 font-semibold text-xs">{index + 1}</span>
                      </div>
                      <div>
                        <div className="font-medium text-gray-800 text-sm">{tool.name}</div>
                        {tool.serial_number && (
                          <div className="text-xs text-gray-500">‚Ññ {tool.serial_number}</div>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center bg-gray-50">
                <p className="text-gray-500">–ù–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</p>
              </div>
            )}
          </div>

          {/* –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ) */}
          <div>
            <h3 className="text-lg font-semibold text-gray-800 mb-3">
              –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </h3>
            <div className="grid grid-cols-2 gap-4">
              <div className={`p-4 rounded-lg ${isFullKit ? 'bg-green-50' : 'bg-blue-50'}`}>
                <div className="text-sm text-gray-600">–í—ã–¥–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:</div>
                <div className={`text-2xl font-bold ${isFullKit ? 'text-green-600' : 'text-blue-600'}`}>
                  {issuedToolsCount}
                </div>
              </div>
              <div className="bg-green-50 p-4 rounded-lg">
                <div className="text-sm text-gray-600">–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:</div>
                <div className="text-2xl font-bold text-green-600">{detectedToolsCount}</div>
              </div>
              <div className={`p-4 rounded-lg ${missingCount === 0 ? 'bg-green-50' : 'bg-red-50'}`}>
                <div className="text-sm text-gray-600">–ù–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö:</div>
                <div className={`text-2xl font-bold ${missingCount === 0 ? 'text-green-600' : 'text-red-600'}`}>
                  {missingCount}
                </div>
              </div>
              <div className={`p-4 rounded-lg ${excessCount === 0 ? 'bg-green-50' : 'bg-orange-50'}`}>
                <div className="text-sm text-gray-600">–õ–∏—à–Ω–∏—Ö:</div>
                <div className={`text-2xl font-bold ${excessCount === 0 ? 'text-green-600' : 'text-orange-600'}`}>
                  {excessCount}
                </div>
              </div>
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ) */}
          {missingTools.length > 0 && (
            <div>
              <div className="flex items-center space-x-2 mb-3">
                <X className="w-5 h-5 text-red-600" />
                <h3 className="text-lg font-semibold text-red-600">
                  –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ({missingCount})
                </h3>
              </div>
              <div className="space-y-2 max-h-40 overflow-y-auto border rounded-lg p-3 bg-red-50">
                {missingTools.map((tool, index) => (
                  <div key={tool.id} className="flex items-center justify-between p-2 bg-white rounded">
                    <div className="flex items-center space-x-3">
                      <div className="w-6 h-6 bg-red-100 rounded-full flex items-center justify-center">
                        <span className="text-red-600 font-semibold text-xs">{index + 1}</span>
                      </div>
                      <div>
                        <div className="font-medium text-gray-800 text-sm">{tool.name}</div>
                        <div className="text-xs text-gray-500">‚Ññ {tool.serial_number}</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–Ω–∏–∑—É */}
        <div className="flex justify-between items-center mt-6 pt-4 border-t">
          {hasMultipleImages && currentImageIndex > 0 ? (
            <button
              onClick={handlePreviousImage}
              className="flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
            >
              <ChevronLeft className="w-4 h-4" />
              <span>–ü—Ä–µ–¥—ã–¥—É—â–µ–µ</span>
            </button>
          ) : (
            <div></div>
          )}
          
          <button
            onClick={handleClose}
            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
          
          {hasMultipleImages && currentImageIndex < imageMLResults.length - 1 ? (
            <button
              onClick={handleNextImage}
              className="flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
            >
              <span>–°–ª–µ–¥—É—é—â–µ–µ</span>
              <ChevronRight className="w-4 h-4" />
            </button>
          ) : (
            <div></div>
          )}
        </div>
      </div>
    </div>
  );
};
