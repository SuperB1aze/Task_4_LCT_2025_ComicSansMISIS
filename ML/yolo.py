import os
import json
import cv2
import numpy as np
import glob
import time
from ultralytics import YOLO


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MODEL_PATH = os.path.join(BASE_DIR, "ML", "best.pt")
MEDIA_DIR = os.path.join(BASE_DIR, "media")

def cleanup_old_files():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)"""
    try:
        current_time = time.time()
        for pattern in ["predictions_*.json", "vis_result_*.jpg", "temp_*.*"]:
            for file_path in glob.glob(os.path.join(MEDIA_DIR, pattern)):
                file_age = current_time - os.path.getmtime(file_path)
                if file_age > 3600:  # 1 —á–∞—Å
                    try:
                        os.remove(file_path)
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file_path}")
                    except:
                        pass
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

os.makedirs(MEDIA_DIR, exist_ok=True)

model = None

# 2. –ö–ª–∞—Å—Å—ã –º–æ–¥–µ–ª–∏ (–≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–∞–∫–æ–º –æ–Ω–∏ –≤ data.yaml)
CLASS_NAMES = [
    "–û—Ç–≤–µ—Ä—Ç–∫–∞ ¬´-¬ª",                     # '1'
    "–ö–ª—é—á —Ä–æ–∂–∫–æ–≤—ã–π/–Ω–∞–∫–∏–¥–Ω–æ–π 3‚ÅÑ4",       # '10'
    "–ë–æ–∫–æ—Ä–µ–∑—ã",                         # '11'
    "–û—Ç–≤–µ—Ä—Ç–∫–∞ ¬´+¬ª",                     # '2'
    "–û—Ç–≤–µ—Ä—Ç–∫–∞ –Ω–∞ —Å–º–µ—â–µ–Ω–Ω—ã–π –∫—Ä–µ—Å—Ç",      # '3'
    "–ö–æ–ª–æ–≤–æ—Ä–æ—Ç",                        # '4'
    "–ü–∞—Å—Å–∞—Ç–∏–∂–∏ –∫–æ–Ω—Ç—Ä–æ–≤–æ—á–Ω—ã–µ",           # '5'
    "–ü–∞—Å—Å–∞—Ç–∏–∂–∏",                        # '6'
    "–®—ç—Ä–Ω–∏—Ü–∞",                          # '7'
    "–†–∞–∑–≤–æ–¥–Ω–æ–π –∫–ª—é—á",                   # '8'
    "–û—Ç–∫—Ä—ã–≤–∞—à–∫–∞ –¥–ª—è –±–∞–Ω–æ–∫ —Å –º–∞—Å–ª–æ–º"     # '9'
]

# 3. Backend –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Å—ã –Ω–∞ –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å
class_thresholds = {cls: 0.5 for cls in CLASS_NAMES}  # –¥–µ—Ñ–æ–ª—Ç = 0.5


def _get_model():
    """–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
    global model
    if model is None:
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –º–æ–¥–µ–ª—å
            if os.path.exists(MODEL_PATH):
                model = YOLO(MODEL_PATH)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å: {MODEL_PATH}")
            else:
                # –ï—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é YOLO
                print(f"‚ö†Ô∏è –ö–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {MODEL_PATH}")
                print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –º–æ–¥–µ–ª—å YOLO...")
                model = YOLO('yolov8n.pt')  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å YOLO")
                
                # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –º–æ–¥–µ–ª—å –∫–∞–∫ –∫–∞—Å—Ç–æ–º–Ω—É—é –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                try:
                    model.save(MODEL_PATH)
                    print(f"üíæ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: {MODEL_PATH}")
                except Exception as save_error:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å: {save_error}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return None
    return model


def run_inference(image_path, thresholds=None, output_file=None, vis_output=None):
    if thresholds is None:
        thresholds = class_thresholds
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    cleanup_old_files()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    import uuid
    unique_id = str(uuid.uuid4())
    
    if output_file is None:
        output_file = os.path.join(MEDIA_DIR, f"predictions_{unique_id}.json")
    if vis_output is None:
        vis_output = os.path.join(MEDIA_DIR, f"vis_result_{unique_id}.jpg")

    current_model = _get_model()
    
    if current_model is None:
        print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON —Ñ–∞–π–ª
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump([], f, ensure_ascii=False, indent=2)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        if vis_output and os.path.exists(image_path):
            import shutil
            shutil.copy2(image_path, vis_output)
        
        return output_file, vis_output

    # –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
    results = current_model.predict(image_path, imgsz=640, conf=0.01, verbose=False)

    predictions = []
    for r in results:
        boxes = r.boxes.xyxy.cpu().numpy()
        scores = r.boxes.conf.cpu().numpy()
        classes = r.boxes.cls.cpu().numpy().astype(int)
        masks = r.masks.data.cpu().numpy() if r.masks is not None else None

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø–æ—Ä–æ–≥–∞
        valid_detections = []
        for i, cls_id in enumerate(classes):
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞ –∏–∑ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Å–ø–∏—Å–æ–∫
            if cls_id < len(CLASS_NAMES):
                cls_name = CLASS_NAMES[cls_id]
            else:
                # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å YOLO, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –∫–ª–∞—Å—Å—ã
                cls_name = f"class_{cls_id}"
            
            score = float(scores[i])

            # –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–∞ –∫–ª–∞—Å—Å
            if score < thresholds.get(cls_name, 0.5):
                continue

            valid_detections.append({
                'class_id': int(cls_id),
                'score': score,
                'box': boxes[i]
            })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (score) –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ
        valid_detections.sort(key=lambda x: x['score'], reverse=True)

        # –ü—Ä–æ—Å—Ç–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é (—Å–∞–º—É—é —É–≤–µ—Ä–µ–Ω–Ω—É—é) –¥–µ—Ç–µ–∫—Ü–∏—é –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
        seen_classes = set()
        for det in valid_detections:
            if det['class_id'] not in seen_classes:
                predictions.append(det['class_id'])
                seen_classes.add(det['class_id'])

        # === –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
        res_plotted = r.plot()  # numpy-–º–∞—Å—Å–∏–≤ BGR —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
        cv2.imwrite(vis_output, res_plotted)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(predictions, f, indent=2, ensure_ascii=False)

    return output_file, vis_output

