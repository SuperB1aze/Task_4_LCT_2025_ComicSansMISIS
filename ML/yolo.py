import os
import json
import cv2
import numpy as np
from ultralytics import YOLO


BASE_DIR = os.path.dirname(os.path.abspath(__file__))
MODEL_PATH = os.path.join(BASE_DIR, "best.pt")
MEDIA_DIR = os.path.join(os.path.dirname(BASE_DIR), "media")

# –ï—Å–ª–∏ media –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –≤ –∫–æ—Ä–Ω–µ
if not os.path.exists(os.path.dirname(MEDIA_DIR)):
    MEDIA_DIR = os.path.join(os.path.dirname(BASE_DIR), "backend-repo", "backend", "media")


os.makedirs(MEDIA_DIR, exist_ok=True)

model = None

# 2. –ö–ª–∞—Å—Å—ã –º–æ–¥–µ–ª–∏ (–≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–∞–∫–æ–º –æ–Ω–∏ –≤ data.yaml)
CLASS_NAMES = [
    "–û—Ç–≤–µ—Ä—Ç–∫–∞ ¬´-¬ª",                     # '1'
    "–ö–ª—é—á —Ä–æ–∂–∫–æ–≤—ã–π/–Ω–∞–∫–∏–¥–Ω–æ–π 3‚ÅÑ4",       # '10'
    "–ë–æ–∫–æ—Ä–µ–∑—ã",                         # '11'
    "–û—Ç–≤–µ—Ä—Ç–∫–∞ ¬´+¬ª",                     # '2'
    "–û—Ç–≤–µ—Ä—Ç–∫–∞ –Ω–∞ —Å–º–µ—â–µ–Ω–Ω—ã–π –∫—Ä–µ—Å—Ç",      # '3'
    "–ö–æ–ª–æ–≤–æ—Ä–æ—Ç",                        # '4'
    "–ü–∞—Å—Å–∞—Ç–∏–∂–∏ –∫–æ–Ω—Ç—Ä–æ–≤–æ—á–Ω—ã–µ",           # '5'
    "–ü–∞—Å—Å–∞—Ç–∏–∂–∏",                        # '6'
    "–®—ç—Ä–Ω–∏—Ü–∞",                          # '7'
    "–†–∞–∑–≤–æ–¥–Ω–æ–π –∫–ª—é—á",                   # '8'
    "–û—Ç–∫—Ä—ã–≤–∞—à–∫–∞ –¥–ª—è –±–∞–Ω–æ–∫ —Å –º–∞—Å–ª–æ–º"     # '9'
]

# 3. Backend –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Å—ã –Ω–∞ –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å
class_thresholds = {cls: 0.5 for cls in CLASS_NAMES}  # –¥–µ—Ñ–æ–ª—Ç = 0.5


def _download_model():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"""
    if os.path.exists(MODEL_PATH):
        return True
    
    print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å...")
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(MODEL_PATH), exist_ok=True)
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —Å —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        model_urls = [
            "https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n.pt",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å YOLO
            "https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8s.pt",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å
        ]
        
        for model_url in model_urls:
            try:
                print(f"–ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —Å: {model_url}")
                import urllib.request
                urllib.request.urlretrieve(model_url, MODEL_PATH)
                print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–∫–∞—á–∞–Ω–∞: {MODEL_PATH}")
                return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å {model_url}: {e}")
                continue
        
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
        return False
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return False

def _get_model():
    """–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
    global model
    if model is None:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(MODEL_PATH):
            if not _download_model():
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å")
                return None
        
        try:
            model = YOLO(MODEL_PATH)
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {MODEL_PATH}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return None
    return model


def run_inference(image_path, thresholds=None, output_file=None, vis_output=None):
    if thresholds is None:
        thresholds = class_thresholds
    
    if output_file is None:
        output_file = os.path.join(MEDIA_DIR, "predictions.json")
    if vis_output is None:
        vis_output = os.path.join(MEDIA_DIR, "vis_result.jpg")

    current_model = _get_model()

    # –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
    results = current_model.predict(image_path, imgsz=640, conf=0.01, verbose=False)

    predictions = []
    for r in results:
        boxes = r.boxes.xyxy.cpu().numpy()
        scores = r.boxes.conf.cpu().numpy()
        classes = r.boxes.cls.cpu().numpy().astype(int)
        masks = r.masks.data.cpu().numpy() if r.masks is not None else None

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø–æ—Ä–æ–≥–∞
        valid_detections = []
        for i, cls_id in enumerate(classes):
            cls_name = CLASS_NAMES[cls_id]
            score = float(scores[i])

            # –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–∞ –∫–ª–∞—Å—Å
            if score < thresholds.get(cls_name, 0.5):
                continue

            valid_detections.append({
                'class_id': int(cls_id),
                'score': score,
                'box': boxes[i]
            })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (score) –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ
        valid_detections.sort(key=lambda x: x['score'], reverse=True)

        # –ü—Ä–æ—Å—Ç–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é (—Å–∞–º—É—é —É–≤–µ—Ä–µ–Ω–Ω—É—é) –¥–µ—Ç–µ–∫—Ü–∏—é –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
        seen_classes = set()
        for det in valid_detections:
            if det['class_id'] not in seen_classes:
                predictions.append(det['class_id'])
                seen_classes.add(det['class_id'])

        # === –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
        res_plotted = r.plot()  # numpy-–º–∞—Å—Å–∏–≤ BGR —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
        cv2.imwrite(vis_output, res_plotted)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(predictions, f, indent=2, ensure_ascii=False)

    return output_file, vis_output

