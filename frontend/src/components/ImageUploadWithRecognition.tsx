import React, { useState, useRef, forwardRef, useImperativeHandle } from 'react'
import { Upload, Camera, Loader2, AlertCircle, CheckCircle, X } from 'lucide-react'
import { useToolRecognition } from '../hooks/useToolRecognition'
import { RecognitionResultsDialog } from './RecognitionResultsDialog'

interface ImageUploadWithRecognitionProps {
  onToolsDetected?: (tools: any[], confidence?: number) => void
  onScanStart?: () => void
  onScanError?: (error: string) => void
  onFileSelected?: (hasFile: boolean) => void
  onFileRemoved?: () => void
  onImageAdded?: (imageUrl: string, fileName: string) => void
  className?: string
  disabled?: boolean
}

export interface ImageUploadWithRecognitionRef {
  startRecognition: () => Promise<void>
}

export const ImageUploadWithRecognition = forwardRef<ImageUploadWithRecognitionRef, ImageUploadWithRecognitionProps>(({
  onToolsDetected,
  onScanStart,
  onScanError,
  onFileSelected,
  onFileRemoved,
  onImageAdded,
  className = '',
  disabled = false
}, ref) => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null)
  const [previewUrl, setPreviewUrl] = useState<string | null>(null)
  const [isDragOver, setIsDragOver] = useState(false)
  const [showResultsDialog, setShowResultsDialog] = useState(false)
  
  const fileInputRef = useRef<HTMLInputElement>(null)
  
  const {
    isProcessing,
    recognitionResult,
    error,
    detectedTools,
    recognizeTools,
    updateTool,
    removeTool,
    confirmTools,
    clearResults
  } = useToolRecognition()

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file && file.type.startsWith('image/')) {
      handleFileSelect(file)
    }
  }

  const handleFileSelect = (file: File) => {
    console.log('üìÅ –í—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª:', file.name)
    setSelectedFile(file)
    const url = URL.createObjectURL(file)
    setPreviewUrl(url)
    clearResults() // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    onFileSelected?.(true)
    onImageAdded?.(url, file.name) // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  }

  const handleDragOver = (event: React.DragEvent) => {
    event.preventDefault()
    if (!disabled) {
      setIsDragOver(true)
    }
  }

  const handleDragLeave = (event: React.DragEvent) => {
    event.preventDefault()
    setIsDragOver(false)
  }

  const handleDrop = (event: React.DragEvent) => {
    event.preventDefault()
    setIsDragOver(false)
    
    if (disabled) return
    
    const files = event.dataTransfer.files
    if (files.length > 0) {
      const file = files[0]
      if (file.type.startsWith('image/')) {
        handleFileSelect(file)
      } else {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
      }
    }
  }


  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–≤–Ω–µ
  const startRecognition = async () => {
    if (!selectedFile) return

    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...')
      console.log('üßπ –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ...')
      clearResults() // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
      onScanStart?.()
      const tools = await recognizeTools(selectedFile)
      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', tools)
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      if (tools.length > 0) {
        const avgConfidence = tools.reduce((sum, tool) => sum + tool.confidence, 0) / tools.length
        console.log('‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:', tools, '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:', avgConfidence)
        console.log('üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏:', tools.length)
        onToolsDetected?.(tools, avgConfidence)
      } else {
        console.log('‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        // –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        onToolsDetected?.([])
      }
      // –£–±–∏—Ä–∞–µ–º –ø–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', err)
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è'
      onScanError?.(errorMessage)
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ ref
  useImperativeHandle(ref, () => ({
    startRecognition
  }))

  const handleConfirmTools = (tools: any[]) => {
    confirmTools(tools)
    setShowResultsDialog(false)
    onToolsDetected?.(tools)
  }

  const handleRetakePhoto = () => {
    setSelectedFile(null)
    setPreviewUrl(null)
    clearResults()
    onFileSelected?.(false)
    fileInputRef.current?.click()
  }

  const handleRemovePhoto = () => {
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ...')
    setSelectedFile(null)
    setPreviewUrl(null)
    clearResults()
    onFileSelected?.(false)
    onFileRemoved?.() // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
  }

  const getStatusIcon = () => {
    if (isProcessing) return <Loader2 className="w-8 h-8 text-blue-500 animate-spin" />
    if (error) return <AlertCircle className="w-8 h-8 text-red-500" />
    if (detectedTools.length > 0) return <CheckCircle className="w-8 h-8 text-green-500" />
    return <Upload className="w-8 h-8 text-gray-400" />
  }

  const getStatusText = () => {
    if (isProcessing) return '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...'
    if (error) return '–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è'
    if (detectedTools.length > 0) return `–ù–∞–π–¥–µ–Ω–æ ${detectedTools.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`
    if (isDragOver) return '–û—Ç–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –∑–¥–µ—Å—å'
    return '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ —Å—é–¥–∞'
  }

  const getSubText = () => {
    if (isProcessing) return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ'
    if (error) return '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
    if (detectedTools.length > 0) return '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
    return '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞'
  }

  return (
    <>
      <div className={`w-full ${className}`}>
        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          onChange={handleFileChange}
          className="hidden"
          disabled={disabled}
        />
        
        <div
          className={`cursor-pointer flex flex-col items-center gap-2 p-6 border-2 border-dashed rounded-lg transition-all duration-200 ${
            isDragOver 
              ? 'border-blue-500 bg-blue-50' 
              : error
              ? 'border-red-300 bg-red-50'
              : detectedTools.length > 0
              ? 'border-green-300 bg-green-50'
              : 'border-gray-300 hover:border-blue-400'
          } ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
          onClick={() => !disabled && fileInputRef.current?.click()}
        >
          {getStatusIcon()}
          
          <div className="text-center">
            <p className={`text-lg font-medium mb-2 ${
              error ? 'text-red-700' : 
              detectedTools.length > 0 ? 'text-green-700' : 
              'text-gray-700'
            }`}>
              {getStatusText()}
            </p>
            <p className="text-sm text-gray-500 mb-4">
              {getSubText()}
            </p>
            
          </div>
        </div>
        
        {/* –û–±–ª–∞—Å—Ç—å –∫–Ω–æ–ø–æ–∫ - –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞ */}
        <div className="mt-4 flex flex-col items-center gap-3">
          {/* –û–±–ª–∞—Å—Ç—å –∫–Ω–æ–ø–æ–∫ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π */}
          <div className="flex gap-2 flex-wrap justify-center min-h-[60px] items-center">
            {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
            {detectedTools.length > 0 && (
              <button
                onClick={() => setShowResultsDialog(true)}
                className="bg-green-600 text-white px-6 py-3 rounded-lg text-sm font-medium hover:bg-green-700 transition-colors flex items-center gap-2 shadow-lg"
              >
                <CheckCircle className="w-5 h-5" />
                –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
              </button>
            )}
            
          </div>
        </div>
        

        {/* Error Message */}
        {error && (
          <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
            <div className="flex items-center gap-2">
              <AlertCircle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-700">{error}</p>
            </div>
          </div>
        )}
      </div>

      {/* Results Dialog */}
      <RecognitionResultsDialog
        isOpen={showResultsDialog}
        onClose={() => setShowResultsDialog(false)}
        result={recognitionResult}
        onConfirmTools={handleConfirmTools}
        onEditTool={updateTool}
        onRemoveTool={removeTool}
      />
    </>
  )
})
