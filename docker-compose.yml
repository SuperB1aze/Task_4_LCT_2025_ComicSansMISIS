services:
  # Фронтенд сервис
  frontend:
    container_name: 'frontend'
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app-network

  # Бекенд сервис
  backend:
    container_name: 'backend'
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
       - ./backend/.env
    environment:
      - DB_NAME=${DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
    volumes:
      - ./backend/src:/app/src
    depends_on:
      - redis
      - db
    networks:
      - app-network

  # База данных PostgreSQL
  db:
    container_name: postgres-db
    image: postgres:15-alpine
    restart: always
    env_file: ./backend/.env
    environment:
        - POSTGRES_DB=${DB_NAME}
        - POSTGRES_USER=${DB_USER}
        - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
        - 54321:5432
    volumes:
        - postgres_data:/var/lib/postgresql/data
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
        interval: 5s
        timeout: 30s
        retries: 3
    networks:
      - app-network

  # Redis сервис
  redis:
    container_name: redis_db
    image: redis:alpine
    restart: always
    env_file: ./backend/.env
    environment:
    - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
    - 6380:6379
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
        - redis_data:/data
    healthcheck:
        test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
        interval: 5s
        timeout: 30s
        retries: 3
    networks:
      - app-network

# Сети
networks:
  app-network:
    driver: bridge

# Тома для постоянного хранения данных
volumes:
  postgres_data:
  redis_data:
