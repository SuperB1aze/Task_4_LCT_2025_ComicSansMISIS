#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π backend –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ Redis
"""

import os
import sys
import uuid
import json
from pathlib import Path
from fastapi import FastAPI, UploadFile, File, Form, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "backend-repo" / "backend" / "src"))
sys.path.append(str(Path(__file__).parent))  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é

try:
    from ML.yolo import CLASS_NAMES, run_inference
    print("‚úÖ ML –º–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ YOLO: {e}")
    print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path(__file__).parent}")
    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {list(Path(__file__).parent.iterdir())}")
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
    alt_path = Path(__file__).parent / "backend-repo" / "backend" / "src"
    print(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å: {alt_path}")
    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—É—Ç–∏: {list(alt_path.iterdir()) if alt_path.exists() else '–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    try:
        from download_model import download_model
        print("üîÑ –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å...")
        if download_model():
            print("‚úÖ –ú–æ–¥–µ–ª—å —Å–∫–∞—á–∞–Ω–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç...")
            from ML.yolo import CLASS_NAMES, run_inference
            print("‚úÖ ML –º–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
        else:
            sys.exit(1)
    except Exception as download_error:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å: {download_error}")
        sys.exit(1)

app = FastAPI(title="Tool Recognition API", version="1.0.0")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3001", 
        "http://localhost:5173", 
        "http://localhost:3000", 
        "http://localhost:3002", 
        "http://localhost:3003",
        "https://task-4-lct-2025-comic-sans-misis.vercel.app",
        "*"  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
MEDIA_DIR = Path("backend-repo/backend/media")
MEDIA_DIR.mkdir(parents=True, exist_ok=True)

@app.get("/")
async def root():
    return {"message": "Tool Recognition API is running!", "status": "ok"}

@app.get("/health")
async def health_check():
    return {"status": "healthy", "model_loaded": True}

@app.post("/predict/")
async def predict_tools(
    image: UploadFile = File(...),
    toolkit_id: int = Form(1),
    confidence: float = Form(0.1)
):
    """
    –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    """
    try:
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ ML –º–æ–¥–µ–ª–∏
        print(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å –ø–æ—Ä–æ–≥–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence}")
        
        # Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        mock_tools = [
            {
                "id": 1,
                "name": "–û—Ç–≤–µ—Ä—Ç–∫–∞ –∫—Ä–µ—Å—Ç–æ–≤–∞—è",
                "serial_number": "SN001",
                "category": "hand_tools"
            },
            {
                "id": 2,
                "name": "–ü–ª–æ—Å–∫–æ–≥—É–±—Ü—ã",
                "serial_number": "SN002", 
                "category": "hand_tools"
            },
            {
                "id": 3,
                "name": "–ö–ª—é—á –≥–∞–µ—á–Ω—ã–π",
                "serial_number": "SN003",
                "category": "hand_tools"
            },
            {
                "id": 4,
                "name": "–ú–æ–ª–æ—Ç–æ–∫",
                "serial_number": "SN004",
                "category": "hand_tools"
            },
            {
                "id": 5,
                "name": "–ù–æ–∂–Ω–∏—Ü—ã",
                "serial_number": "SN005",
                "category": "hand_tools"
            }
        ]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        hand_check = len(mock_tools) < 5
        
        return JSONResponse(content={
            "found_tools": mock_tools,
            "hand_check": hand_check,
            "processed_image_url": None,
            "ml_predictions": [0, 1, 2, 3, 4]  # Mock predictions
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}")

@app.get("/media/{filename}")
async def get_media(filename: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    file_path = MEDIA_DIR / filename
    if file_path.exists():
        from fastapi.responses import FileResponse
        return FileResponse(file_path)
    else:
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == "__main__":
    import os
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Heroku/Railway)
    port = int(os.environ.get("PORT", 8000))
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ backend'–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    model_paths = [
        "ML/best.pt",
        "backend-repo/backend/src/ML/best.pt"
    ]
    
    model_path = None
    for path in model_paths:
        if Path(path).exists():
            model_path = path
            break
    
    if model_path:
        print("üìÅ –ú–æ–¥–µ–ª—å:", model_path)
    else:
        print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    
    print(f"üåê API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É: {port}")
    print(f"üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:{port}/docs")
    
    uvicorn.run(app, host="0.0.0.0", port=port)
